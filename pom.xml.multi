<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>
   <groupId>com.felixalacampagne</groupId>
   <artifactId>FLACtagger</artifactId>
   <!-- 
        <version>${recivaportal.app.version}</version>
        
        In yet another attack of the modern tool developers living in a parallel universe the maven geniuses
        have decreed that the annoyance of the absurd requirement to be specifiedrequirement everywhere
        shall be exacerbated by prevent use of a variable to propgate the same version into all the
        idiotic places it is required.
        
        Instead each time the version is changed ALL of the dependent files must also be changed and then
        re-added to the source control system.
        There solution to the issue they created:
        mvn versions:set -DnewVersion=0.0.2-SNAPSHOT
    -->
   <version>0.0.1-SNAPSHOT</version>
   <packaging>pom</packaging>
   <name>FLACtagger</name>

   <properties>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <!-- JRE version must be specified in a plugin block now, see below -->
      <maven.compiler.source>1.8</maven.compiler.source>
      <maven.compiler.target>1.8</maven.compiler.target>
      <maven.deploy.plugin.version>2.8.2</maven.deploy.plugin.version>
      <maven.javadoc.skip>true</maven.javadoc.skip>
      
   </properties>

   <modules>
   <!--
      <module>jaudiotagger</module>
      <module>JustFLAC</module>
    -->
      <module>flactagger-lib</module>
   </modules>

   
 
 
   <!-- All this to tell it to use Java 11  -->
   <build>
      <plugins>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.8.0</version>
            <configuration>
                <!-- More modern tool lunacy. Must use 'source' and 'target' or Java 1.0 is the default 
                (or something just as out of date) and Java 8 syntax gives build errors even though a Java 8 JDK
                is being used. To ensure complete lack of consistency 'release' must be used to 
                compile with Java 11 (even though there are no Java 11 language features used in my code! -->
               <source>1.8</source>
               <target>1.8</target>            
               <!-- release>11</release -->
            </configuration>
         </plugin>
 
      </plugins>
   </build>
</project>