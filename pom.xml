<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

   <modelVersion>4.0.0</modelVersion>
   <groupId>com.felixalacampagne</groupId>
   <artifactId>FLACtagger</artifactId>
   <version>1.0.3-RELEASE</version>
   <name>FLACtagger</name>
   <properties>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <!-- JRE version must be specified in a plugin block now, see below -->
      <maven.compiler.source>11</maven.compiler.source>
      <maven.compiler.target>11</maven.compiler.target>
      <maven.deploy.plugin.version>2.8.2</maven.deploy.plugin.version>
      <maven.javadoc.skip>true</maven.javadoc.skip>
      <jaxb.version>3.0.2</jaxb.version>
      <maven.build.timestamp.format>yy.MM.dd.HHmm</maven.build.timestamp.format>
   </properties>
   
   <dependencies>
   
      <!-- https://github.com/drogatkin/JustFLAC.git -->
      <dependency>
         <groupId>drogatkin</groupId>
         <artifactId>JustFLAC</artifactId>
         <version>0.0.1-SNAPSHOT</version>
      </dependency>

      <!-- https://search.maven.org/artifact/net.jthink/jaudiotagger/3.0.1/jar -->
      <dependency>
        <groupId>net.jthink</groupId>
        <artifactId>jaudiotagger</artifactId>
        <version>3.0.1</version>
      </dependency>
      

      <!-- https://search.maven.org/artifact/net.java.dev.jna/jna -->
      <dependency>
         <groupId>net.java.dev.jna</groupId>
         <artifactId>jna</artifactId>
         <version>5.13.0</version>
      </dependency>

      <!-- https://central.sonatype.com/artifact/net.java.dev.jna/jna-platform -->
      <dependency>
          <groupId>net.java.dev.jna</groupId>
          <artifactId>jna-platform</artifactId>
          <version>5.13.0</version>
      </dependency>      
      
      <!-- Dependencies required for using JAXB with java 11.
           Note that the same dependencies are now used with Java 8 since the package names
           of the JAXB components have been changed so the in-built version in Java8 cannot
           be used.
           In theory this should work however the Java code generation from XSD does not work
           when Java 8 is used. I did create a build using Java 8 but I guess that the generated sources
           from a previous Java 11 build were not cleaned up by the clean command (why would it actually 
           do what is expected???) and not re-created by the Java 8 build so the jakarta references
           were satisfied. Unfortuanately when built on a system which did not have Java 11 generated
           code and which actually generated the sources under Java 8 the generated sources were using javax so the 
           jakarta references were unsatisfied.
           
           
       -->
      <!-- https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-xjc -->
      <dependency>
         <groupId>org.glassfish.jaxb</groupId>
         <artifactId>jaxb-xjc</artifactId>
         <version>${jaxb.version}</version>
      </dependency>

      <!-- https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-core -->
      <dependency>
         <groupId>org.glassfish.jaxb</groupId>
         <artifactId>jaxb-core</artifactId>
         <version>${jaxb.version}</version>
      </dependency>

      <!-- https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-runtime -->
      <dependency>
         <groupId>org.glassfish.jaxb</groupId>
         <artifactId>jaxb-runtime</artifactId>
         <version>${jaxb.version}</version>
      </dependency>

      <!-- https://mvnrepository.com/artifact/jakarta.xml.bind/jakarta.xml.bind-api -->
      <dependency>
         <groupId>jakarta.xml.bind</groupId>
         <artifactId>jakarta.xml.bind-api</artifactId>
         <version>3.0.1</version>
      </dependency>

      <!-- https://mvnrepository.com/artifact/com.sun.activation/jakarta.activation -->
      <dependency>
         <groupId>com.sun.activation</groupId>
         <artifactId>jakarta.activation</artifactId>
         <version>2.0.1</version>
      </dependency>
   </dependencies>

   <build>
      <sourceDirectory>${basedir}/src/main</sourceDirectory>
      <plugins>
         <!-- Forking hell these maven aholes sure know how to fork around. The build timestamp is hardcoded
              to be GMT, with no way to get it to be the local time, like everyone else in the world wants it
              to be. Supposedly throwing yet more magic shirt at it will fix it. But for cyring out loud why the
              fork dont they try actually using this shirt themselves for a change.....
              Even the suggested workaround sucks as there isn't a way to say just use the local time,
              instead a timezone must be provided which defeats the whole point of using the workaround!!!
         -->
         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <version>3.3.0</version>
            <executions>
                <execution>
                    <id>timestamp-property</id>
                    <phase>generate-sources</phase>
                    <goals>
                        <goal>timestamp-property</goal>
                    </goals>
                    <configuration>
                        <name>localtime</name>
                        <pattern>yyyy-MM-dd HH:mm</pattern>
                        <locale>en_US</locale>
                        <timeZone>Europe/Brussels</timeZone>
                    </configuration>
                </execution>
            </executions>
        </plugin> 
               
         <!-- Process sources in src/java-templates - used to create the BuildInfo.java file containing a version -->
         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>templating-maven-plugin</artifactId>
            <version>1.0.0</version>
            <executions>
                <execution>
                    <id>filtering-java-templates</id>
                    <goals>
                        <goal>filter-sources</goal>
                    </goals>
                    <configuration>
                     <!-- defaults to ${basedir}/src/main/java-templates -->
                     <sourceDirectory>java-templates</sourceDirectory>
                     <!-- outputDirectory>${project.build.directory}/generated-sources/java-templates</outputDirectory -->
                    </configuration>
                </execution>
            </executions>
        </plugin>  
           
         <!-- generate source from xsd.
              NB. jaxb2-maven-plugin does not generate the required 'jakarta' flavour of JXB.
              NBB. the required 'jakarta' flavour of JXB is only generated by cxf-xjc-plu when Java 11 is used, 
              under Java 8 the JXB incorrectly uses javax. Maybe there is a way around this but if there is it
              has been typically very well obfuscated.
          -->
         <plugin>
             <groupId>org.apache.cxf</groupId>
             <artifactId>cxf-xjc-plugin</artifactId>
             <version>3.3.4</version>
             <executions>
                 <execution>
                     <id>xjc</id>
                     <phase>generate-sources</phase> <!-- this is actually the 'goal' (typical maven bs)  -->
                     <goals>
                         <goal>xsdtojava</goal> <!-- requires a 'prefix' to use as a goal - this prefix is not the obvious 'cxf-xjc-plugin' and is obviously not documented -->
                     </goals>
                     <configuration>
                     
                     <!-- This sets the output directory for the generated code. -->
                     <sourceRoot>${basedir}/src/generated</sourceRoot>
                         <xsdOptions>
                             <xsdOption>
                                 <xsd>${basedir}/src/main/com/felixalacampagne/flactagger/flactags.xsd</xsd>
                                 <packagename>com.felixalacampagne.flactagger.generated.flactags</packagename>
                             </xsdOption>
                         </xsdOptions>
                     </configuration>
                 </execution>
             </executions>                    
         </plugin>   
         <plugin>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.10.0</version>
            <configuration>
               <source>${maven.compiler.source}</source>
               <target>${maven.compiler.target}</target>
            </configuration>
         </plugin>
         
         
         <!-- This generates the final deliverable: an 'executable' a jar called FLACtagger containing 
              FLACtagger, plus all of the dependencies extracted into it, in the root of the project.
              
              It causes some typically weird nonsensical maven messages to be output during the build
              about replacing a file with one name by a file with a completely different name - the result 
              seems to be what is required, ie. an executable jar called FLACtagger.jar in the project root,
              so they can be ignored.
          -->
         <plugin>
            <artifactId>maven-assembly-plugin</artifactId>
            <configuration>
               <archive>
                  <manifest>
                     <mainClass>com.felixalacampagne.flactagger.gui.FLACtaggerGui</mainClass>
                  </manifest>
               </archive>
               <finalName>../FLACtagger</finalName>
               <appendAssemblyId>false</appendAssemblyId>
               <descriptorRefs>
                  <descriptorRef>jar-with-dependencies</descriptorRef>
               </descriptorRefs>
            </configuration>
            <!-- This magic means 'package' can be used as the mvn command instead of needing to add 'assembly:single' 
                 By a fortuitous quirk of fate it also means that the combined jar is built as part of the 
                 normal 'clean install' build of the parent project. I'd only spent hours and hours trying to figure
                 out how to do that without finding any clue anywhere, and needless to say the page where I found
                 the magic also makes no hint whatsoever that this is what adding the magic will actually achieve,
                 gotta love these forking modern tools and the incomprehensible jibberish their creators use
                 to describe them!
                 
                 Just need to have the name changed to something more friendly and it would be just about complete!
                 
                 After more hours of googling I found a way to set the file name - nothing whatsoever in the reference
                 for the plugin of course but 'finalName' and 'appendAssemblyId' do the trick. Don't know
                 how to specify the parent project directory - by default the jar is built in the target directory
                 of the sub-project, so ../ puts it where I want it.
            -->
            <executions>
               <execution>
                  <id>make-assembly</id>
                  <phase>package</phase>
                  <goals>
                     <goal>single</goal>
                  </goals>
               </execution>
            </executions>
         </plugin>

      </plugins>
   </build>
</project>
