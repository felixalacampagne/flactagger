<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

   <!--
   maven file to download the project dependencies to the 'lib' sub-directory at the pom's location.

   Must be run with following arguments:

   mvn dependency:copy-dependencies -DoutputDirectory=OUTPUT_DIR

   Don't know why the DoutputDirectory arg is required since it is given in the pom.xml

   -->

   <modelVersion>4.0.0</modelVersion>
   <groupId>com.felixalacampagne</groupId>
   <artifactId>FLACtagger</artifactId>
   <version>0.0.1-SNAPSHOT</version>
   <properties>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <!-- JRE version must be specified in a plugin block now, see below -->
      <maven.compiler.source>1.8</maven.compiler.source>
      <maven.compiler.target>1.8</maven.compiler.target>
      <maven.deploy.plugin.version>2.8.2</maven.deploy.plugin.version>
      <maven.javadoc.skip>true</maven.javadoc.skip>
      
         
      <jaxb.version>3.0.2</jaxb.version>
   </properties>
   
   <dependencies>
      <dependency>
         <groupId>drogatkin</groupId>
         <artifactId>JustFLAC</artifactId>
         <version>0.0.1-SNAPSHOT</version>
      </dependency>

      <dependency>
         <groupId>net.jthink</groupId>
         <artifactId>jaudiotagger</artifactId>
         <version>2.2.6-SNAPSHOT</version>
      </dependency>

      <!-- https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-xjc
      -->
      <dependency>
         <groupId>org.glassfish.jaxb</groupId>
         <artifactId>jaxb-xjc</artifactId>
         <version>${jaxb.version}</version>
      </dependency>

      <!-- https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-core
      -->
      <dependency>
         <groupId>org.glassfish.jaxb</groupId>
         <artifactId>jaxb-core</artifactId>
         <version>${jaxb.version}</version>
      </dependency>

      <!--
      https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-runtime -->
      <dependency>
         <groupId>org.glassfish.jaxb</groupId>
         <artifactId>jaxb-runtime</artifactId>
         <version>${jaxb.version}</version>
      </dependency>

      <!--
      https://mvnrepository.com/artifact/jakarta.xml.bind/jakarta.xml.bind-api -->
      <dependency>
         <groupId>jakarta.xml.bind</groupId>
         <artifactId>jakarta.xml.bind-api</artifactId>
         <version>3.0.1</version>
      </dependency>

      <!--
      https://mvnrepository.com/artifact/com.sun.activation/jakarta.activation -->
      <dependency>
         <groupId>com.sun.activation</groupId>
         <artifactId>jakarta.activation</artifactId>
         <version>2.0.1</version>
      </dependency>

      <dependency>
         <groupId>net.java.dev.jna</groupId>
         <artifactId>jna</artifactId>
         <version>5.10.0</version>
      </dependency>

      <dependency>
         <groupId>net.java.dev.jna</groupId>
         <artifactId>platform</artifactId>
         <version>3.5.2</version>
      </dependency>

   </dependencies>
   <build>
      <sourceDirectory>src</sourceDirectory>
      <plugins>
         <plugin>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.10.0</version>
            <configuration>
               <source>1.8</source>
               <target>1.8</target>
            </configuration>
         </plugin>
         <!-- plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <version>3.2.0</version>
            <executions>
               <execution>
                  <id>default-cli</id>
                  <configuration>
                     <overWriteIfNewer>true</overWriteIfNewer>
                     <outputDirectory>./lib</outputDirectory>
                     <excludeTransitive>true</excludeTransitive>

                  </configuration>
               </execution>
            </executions>
         </plugin -->
         <!-- This generate a jar containing FLACtagger plus all of the dependencies extracted into it.
          -->
         <plugin>
            <artifactId>maven-assembly-plugin</artifactId>
            <configuration>
               <archive>
                  <manifest>
                     <mainClass>com.felixalacampagne.flactagger.gui.FLACtaggerGui</mainClass>
                  </manifest>
               </archive>
               <finalName>../FLACtagger</finalName>
               <appendAssemblyId>false</appendAssemblyId>
               <descriptorRefs>
                  <descriptorRef>jar-with-dependencies</descriptorRef>
               </descriptorRefs>
            </configuration>
            <!-- This magic means 'package' can be used as the mvn command instead of needing to add 'assembly:single' 
                 By a fortuitous quirk of fate it also means that the combined jar is built as part of the 
                 normal 'clean install' build of the parent project. I'd only spent hours and hours trying to figure
                 out how to do that without finding any clue anywhere, and needless to say the page where I found
                 the magic also makes no hint whatsoever that this is what adding the magic will actually achieve,
                 gotta love these forking modern tools and the incomprehensible jibberish their creators use
                 to describe them!
                 
                 Just need to have the name changed to something more friendly and it would be just about complete!
                 
                 After more hours of googling I found a way to set the file name - nothing whatsoever in the reference
                 for the plugin of course but 'finalName' and 'appendAssemblyId' do the trick. Don't know
                 how to specify the parent project directory - by default the jar is built in the target directory
                 of the sub-project, so ../../ puts it where I want it.
            -->
            <executions>
               <execution>
                  <id>make-assembly</id>
                  <phase>package</phase>
                  <goals>
                     <goal>single</goal>
                  </goals>
               </execution>
            </executions>
         </plugin>

      </plugins>
   </build>
</project>
