<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
<!-- Generated by: https://www.freeformatter.com/xsd-generator.html (Venetian Blind format) -->
  <xs:element name="flactags" type="FlacTags"/>
  <!-- IMPORTANT: element names must be lowercase only.
       This is to assist the lyric cleaning process which needs to search for odd case combinations, eg.
       "last line of lyricWritten by"
       Camel case elements names are mistaken for garbage to be removed...
   -->
  <xs:complexType name="FlacTags">
    <xs:sequence>
      <xs:element type="Directory" name="directory" maxOccurs="unbounded" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="Directory">
    <xs:sequence>
      <xs:element type="xs:string" name="name"/>
      <xs:element type="FileList" name="files"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="FileList">
    <xs:sequence>
      <!-- name becomes the tag of a single entry in the FileList, ie. a file
           is represented as a tag block called "filemetadata", which is fine and good.
           Unfortunately name also becomes the name of the method to get ALL the files, ie. the
           list of files. Thus FileList.getFilemetadata actually returns a List<FileMetadata>
           which is a bit counter-intuitive. Originally name=list, but results in the file tag blocks
           being called 'list', which looks worse. There maybe a way to avoid this with the .xjb
           binding but not really worth the hassle. It's nicer to have the XML look good so I'll
           live withthe strange looking method name.
           
           Wanted tracknumber to be an integer but, in typical Java how-can-we-make-this-useless fashion,
           this maps to BigInteger in the generated code. 
           I tried changing this via the .xjb (hint: jxb:javaType name="java.lang.Integer") but the 
           generated source code contained invalid annotations like "XmlJavaTypeAdapter(Adapter1 .class)".
           Finally found a workaround (thank you Google!!) using "xs:int". Normally xs:int is translated to a 
           native Java int but when the field is optional, and therefore needs to have a null value, an 
           Integer is used instead!
           NB. Dropped idea of setting restrictions on the range of tracknumber;
           1) Restrictions are not implemented in the generated Java code
           2) FLACtagger must use whatever tracknumber value is in the FLAC file
              so cannot impose arbitrary restrictions on the range.         
       -->
      <xs:element type="FileMetadata" name="filemetadata" maxOccurs="unbounded" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="FileMetadata">
    <xs:sequence>
    	<xs:element type="xs:string" name="name" />
    	<xs:element type="xs:int   " name="tracknumber" minOccurs="0" />
    	<xs:element type="xs:string" name="artist" minOccurs="0" />
    	<xs:element type="xs:string" name="album" minOccurs="0" />
    	<xs:element type="xs:string" name="title" minOccurs="0" />
    	<xs:element type="xs:string" name="filemd5" minOccurs="0" />
    	<xs:element type="xs:string" name="calcpcmmd5" minOccurs="0" />
    	<xs:element type="xs:string" name="strmpcmmd5" minOccurs="0" />

    	<xs:element name="albumartist" type="xs:string" maxOccurs="1"
    		minOccurs="0">
    	</xs:element>
    	<xs:element name="composer" type="xs:string" maxOccurs="1"
    		minOccurs="0">
    	</xs:element>
    	<xs:element name="comment" type="xs:string" maxOccurs="1"
    		minOccurs="0">
    	</xs:element>
    	<xs:element name="year" type="xs:string" maxOccurs="1"
    		minOccurs="0">
    	</xs:element>
    	<xs:element name="compilation" type="xs:boolean" maxOccurs="1"
    		minOccurs="0">
    	</xs:element>
            <xs:element name="genre" type="xs:string" maxOccurs="1" minOccurs="0"></xs:element>
            <xs:element type="xs:string" name="lyric" minOccurs="0" />

    </xs:sequence>
  </xs:complexType>

</xs:schema>
